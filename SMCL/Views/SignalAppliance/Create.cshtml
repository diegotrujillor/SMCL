@model SMCLCore.Domain.Model.SignalAppliance

@{
    ViewBag.Title = "Señales por equipo - Crear nuevo registro";
}

<table id="no_css" width="100%">
    <tr>
        <td>
            <div class="titlejQGrid">Crear nuevo registro</div>
        </td>
        <td style="text-align: right;">
            <a href="~/../Index">
                <img src="@Url.Content("~/Content/Images/jnj_reports_go_back.png")" alt="regresar" title="Regresar" border="0" />
            </a>
            <span>&nbsp;Regresar...</span>
        </td>
    </tr>
</table>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.numeric.js")" type="text/javascript"></script>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    <fieldset>
        <div id="ErrorMessage" style="color: #F00; text-decoration: blink;">
            @ViewData["ValidationErrorMessage"].ToString()
        </div>

        <legend>Señales por equipos</legend>

        <table id="no_css" style="margin: 0 auto;">
            <tr>
                <td>
                    <div class="editor-label" style="font-weight: normal;">
                        <div style="color: #F00;">
                            @Html.LabelFor(model => model.Signal.Id, "Señal (*)")
                        </div>
                    </div>
                    <div class="editor-field">
                        @Html.DropDownList("SignalId", null, String.Empty, null)
                        @Html.ValidationMessageFor(model => model.Signal.Id, System.Configuration.ConfigurationManager.AppSettings["EmptyFieldErrorMessage"].ToString())
                    </div>
                </td>
                <td>
                    <div class="editor-label" style="font-weight: normal;">
                        <div style="color: #F00;">
                            @Html.Label("Set Point", "Set Point (*)")
                        </div>
                    </div>
                    <div class="editor-field">
                        @Html.TextBox("SetPoint", null, new { style = "width: 80%;", @class = "positive", maxlength = 7 })
                    </div>
                </td>
                <td>
                    <div class="editor-label" style="font-weight: normal;">
                        <div style="color: #F00;">
                            @Html.Label("Tolerancia (*)")
                        </div>
                    </div>
                    <div class="editor-field">
                        @Html.TextBox("Tolerance", null, new { style = "width: 80%;", @class = "positive", maxlength = 7 })
                    </div>
                </td>
                <td>
                    <div class="editor-label">
                        <div style="font-weight: normal; text-align: left;">
                            @Html.Label("Und Medida")
                        </div>
                    </div>
                    <div class="editor-field">
                        <label id="MeasureUnit">N/A</label>
                    </div>
                </td>
                <td>
                    <div class="editor-label" style="font-weight: normal;">
                        <div style="color: #F00;">
                            @Html.LabelFor(model => model.Appliance.Id, "Equipo (*)")
                        </div>
                    </div>
                    <div class="editor-field">
                        @Html.DropDownList("ApplianceId", null, String.Empty, null)
                        @Html.ValidationMessageFor(model => model.Appliance.Id, System.Configuration.ConfigurationManager.AppSettings["EmptyFieldErrorMessage"].ToString())
                    </div>
                </td>        
            </tr>
        </table>

        <div id="alarms" align="center">
            <fieldset>
                <legend>L&iacute;mites</legend>

                <table>
                    <colgroup>
                        <col class="colAlarmDesc" />
                        <col class="colAlarmVal" />
                        <col class="colAlarmDesc" />
                        <col class="colAlarmVal" />
                    </colgroup>
                    <tbody>
                        <tr>
                            <td>Alta</td>
                            <td><input type="text" name="highAlarm" disabled="disabled" /></td>
                            <td>Baja</td>
                            <td><input type="text" name="lowAlarm" disabled="disabled" /></td>
                        </tr>
                    </tbody>
                </table>
            </fieldset>
        </div>

        <div>
            <input type="submit" value="Crear" />
        </div>

        <div id="displayMessages">
            <label class="display-message">(*) Campos obligatorios</label>
        </div>
    </fieldset>
}

<script type="text/javascript">
    $(function(){
            $("#SignalId").change(function () {
            var diffPresure = @Html.Raw(Json.Encode(System.Configuration.ConfigurationManager.AppSettings["DifferentialPressure"]));
            var temperature = @Html.Raw(Json.Encode(System.Configuration.ConfigurationManager.AppSettings["Temperature"]));
            var rh = @Html.Raw(Json.Encode(System.Configuration.ConfigurationManager.AppSettings["RH"]));
        
            switch ($(this).val().toString()) {
                case diffPresure:
                    document.getElementById("MeasureUnit").innerHTML = @Html.Raw(Json.Encode(System.Configuration.ConfigurationManager.AppSettings["InchesOfWater"]));
                    break;
                case temperature:
                    document.getElementById("MeasureUnit").innerHTML = @Html.Raw(Json.Encode(System.Configuration.ConfigurationManager.AppSettings["DegreeCelsius"]));
                    break;
                case rh:
                    document.getElementById("MeasureUnit").innerHTML = @Html.Raw(Json.Encode(System.Configuration.ConfigurationManager.AppSettings["Percentage"]));
                    break;
                default:
                    document.getElementById("MeasureUnit").innerHTML = "N/A";
                    break;
            }
        });

        $("#SetPoint").keyup(function(){
            if(notANumber($(this).val()) || notANumber($("#Tolerance").val())){
                $("input[name=highAlarm]").val("");
                $("input[name=lowAlarm]").val("");
            }else{
                var setPoint = strToFloat($(this).val(), 2);
                var tolerance = strToFloat($("#Tolerance").val(), 2);
                $("input[name=highAlarm]").val(floatSum(setPoint, tolerance, 2));
                $("input[name=lowAlarm]").val(floatSub(setPoint, tolerance, 2));
            }
        });
        
        $("#Tolerance").keyup(function(){
            if(notANumber($(this).val()) || notANumber($("#SetPoint").val())){
                $("input[name=highAlarm]").val("");
                $("input[name=lowAlarm]").val("");
            }else{
                var setPoint = strToFloat($("#SetPoint").val(), 2);
                var tolerance = strToFloat($(this).val(), 2);
                $("input[name=highAlarm]").val(floatSum(setPoint, tolerance, 2));
                $("input[name=lowAlarm]").val(floatSub(setPoint, tolerance, 2));
            }
        });

        $(".positive").numeric({ negative: true }, function () { alert("N/A"); this.value = ""; this.focus(); });

    });

    function notANumber(value){
        return value == null || value == "" || value.match(/^\d+([\.,]\d+)?$/g) == null;
    }

    function strToFloat(value, numberOfDecimals){
        return parseFloat(value.replace(/,/g, ".")).toFixed(numberOfDecimals);
    }

    function floatSum(a, b, numberOfDecimals){
        return (parseFloat(a) + parseFloat(b)).toFixed(numberOfDecimals);
    }

    function floatSub(a, b, numberOfDecimals){
        return (parseFloat(a) - parseFloat(b)).toFixed(numberOfDecimals);
    }
    
</script>